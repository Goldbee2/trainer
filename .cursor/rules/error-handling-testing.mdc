---
description: 
globs: *.tsx
alwaysApply: false
---
# Error Handling and Testing

## Error Handling Patterns

### Use Result Types for Error Handling
Implement explicit error handling using discriminated unions.

```tsx
// ✅ Good - Result type pattern
type Result<T, E = string> = 
  | { success: true; data: T }
  | { success: false; error: E }

// Service layer with Result type
export const userService = {
  async fetchUser(id: string): Promise<Result<User>> {
    try {
      const response = await apiClient.get(`/users/${id}`)
      return { success: true, data: response.data }
    } catch (error) {
      if (error.response?.status === 404) {
        return { success: false, error: 'User not found' }
      }
      if (error.response?.status === 403) {
        return { success: false, error: 'Access denied' }
      }
      return { success: false, error: 'Failed to fetch user' }
    }
  }
}

// Usage in components
const UserProfile = ({ userId }: Props) => {
  const [user, setUser] = useState<User | null>(null)
  const [error, setError] = useState<string | null>(null)
  const [loading, setLoading] = useState(true)
  
  useEffect(() => {
    const loadUser = async () => {
      const result = await userService.fetchUser(userId)
      
      if (result.success) {
        setUser(result.data)
        setError(null)
      } else {
        setError(result.error)
        setUser(null)
      }
      
      setLoading(false)
    }
    
    loadUser()
  }, [userId])
  
  if (loading) return <LoadingSpinner />
  if (error) return <ErrorMessage message={error} />
  if (!user) return <NotFound />
  
  return <div>{/* User profile UI */}</div>
}
```

### Error Boundaries for Component Errors
Implement error boundaries to gracefully handle component errors.

```tsx
// ✅ Good - Comprehensive error boundary
interface ErrorBoundaryState {
  hasError: boolean
  error: Error | null
  errorInfo: ErrorInfo | null
}

interface ErrorBoundaryProps {
  children: React.ReactNode
  fallback?: React.ComponentType<{ error: Error; reset: () => void }>
  onError?: (error: Error, errorInfo: ErrorInfo) => void
}

export class ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {
  constructor(props: ErrorBoundaryProps) {
    super(props)
    this.state = {
      hasError: false,
      error: null,
      errorInfo: null
    }
  }
  
  static getDerivedStateFromError(error: Error): Partial<ErrorBoundaryState> {
    return {
      hasError: true,
      error
    }
  }
  
  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    this.setState({ errorInfo })
    
    // Log to error reporting service
    console.error('Error caught by boundary:', error)
    console.error('Error info:', errorInfo)
    
    // Call optional error handler
    this.props.onError?.(error, errorInfo)
  }
  
  handleReset = () => {
    this.setState({
      hasError: false,
      error: null,
      errorInfo: null
    })
  }
  
  render() {
    if (this.state.hasError && this.state.error) {
      const FallbackComponent = this.props.fallback || DefaultErrorFallback
      return <FallbackComponent error={this.state.error} reset={this.handleReset} />
    }
    
    return this.props.children
  }
}

// Default error fallback component
const DefaultErrorFallback = ({ error, reset }: { error: Error; reset: () => void }) => (
  <div className="flex flex-col items-center justify-center p-8 text-center">
    <h2 className="text-xl font-semibold text-gray-900 mb-2">Something went wrong</h2>
    <p className="text-gray-600 mb-4">We apologize for the inconvenience.</p>
    <details className="mb-4 text-sm text-gray-500">
      <summary className="cursor-pointer">Error details</summary>
      <pre className="mt-2 whitespace-pre-wrap">{error.message}</pre>
    </details>
    <button
      onClick={reset}
      className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
    >
      Try again
    </button>
  </div>
)
```

### Form Validation and Error Handling
Implement comprehensive form validation with clear error messages.

```tsx
// ✅ Good - Form with validation and error handling
import { z } from 'zod'

const userSchema = z.object({
  name: z.string().min(2, 'Name must be at least 2 characters'),
  email: z.string().email('Please enter a valid email address'),
  age: z.number().min(18, 'Must be at least 18 years old').max(120, 'Please enter a valid age')
})

type UserFormData = z.infer<typeof userSchema>

const UserForm = ({ onSubmit }: Props) => {
  const [formData, setFormData] = useState<UserFormData>({
    name: '',
    email: '',
    age: 0
  })
  
  const [errors, setErrors] = useState<Partial<Record<keyof UserFormData, string>>>({})
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [submitError, setSubmitError] = useState<string | null>(null)
  
  const validateField = (field: keyof UserFormData, value: any) => {
    try {
      userSchema.pick({ [field]: true }).parse({ [field]: value })
      setErrors(prev => ({ ...prev, [field]: undefined }))
    } catch (error) {
      if (error instanceof z.ZodError) {
        setErrors(prev => ({ ...prev, [field]: error.errors[0]?.message }))
      }
    }
  }
  
  const handleFieldChange = (field: keyof UserFormData, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }))
    validateField(field, value)
  }
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    try {
      const validatedData = userSchema.parse(formData)
      setIsSubmitting(true)
      setSubmitError(null)
      
      const result = await onSubmit(validatedData)
      
      if (!result.success) {
        setSubmitError(result.error)
      }
    } catch (error) {
      if (error instanceof z.ZodError) {
        const fieldErrors: Partial<Record<keyof UserFormData, string>> = {}
        error.errors.forEach(err => {
          if (err.path[0]) {
            fieldErrors[err.path[0] as keyof UserFormData] = err.message
          }
        })
        setErrors(fieldErrors)
      } else {
        setSubmitError('An unexpected error occurred')
      }
    } finally {
      setIsSubmitting(false)
    }
  }
  
  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      {submitError && (
        <div className="p-3 bg-red-50 border border-red-200 rounded-md text-red-700">
          {submitError}
        </div>
      )}
      
      <div>
        <label htmlFor="name" className="block text-sm font-medium text-gray-700">
          Name
        </label>
        <input
          id="name"
          type="text"
          value={formData.name}
          onChange={(e) => handleFieldChange('name', e.target.value)}
          className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm ${
            errors.name ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : 'focus:border-blue-500 focus:ring-blue-500'
          }`}
        />
        {errors.name && (
          <p className="mt-1 text-sm text-red-600">{errors.name}</p>
        )}
      </div>
      
      {/* Similar inputs for email and age */}
      
      <button
        type="submit"
        disabled={isSubmitting || Object.values(errors).some(Boolean)}
        className="w-full py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
      >
        {isSubmitting ? 'Submitting...' : 'Submit'}
      </button>
    </form>
  )
}
```

## Testing Best Practices

### Component Testing with React Testing Library
Write tests that focus on user behavior and accessibility.

```tsx
// ✅ Good - Component testing with user behavior focus
import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import { UserCard } from './UserCard'

const mockUser: User = {
  id: '1',
  name: 'John Doe',
  email: 'john@example.com',
  role: 'admin'
}

describe('UserCard', () => {
  it('displays user information correctly', () => {
    render(<UserCard user={mockUser} />)
    
    expect(screen.getByText('John Doe')).toBeInTheDocument()
    expect(screen.getByText('john@example.com')).toBeInTheDocument()
    expect(screen.getByText('Admin')).toBeInTheDocument()
  })
  
  it('calls onEdit when edit button is clicked', async () => {
    const user = userEvent.setup()
    const mockOnEdit = jest.fn()
    
    render(<UserCard user={mockUser} onEdit={mockOnEdit} />)
    
    const editButton = screen.getByRole('button', { name: /edit user/i })
    await user.click(editButton)
    
    expect(mockOnEdit).toHaveBeenCalledWith(mockUser)
  })
  
  it('shows confirmation dialog when delete button is clicked', async () => {
    const user = userEvent.setup()
    const mockOnDelete = jest.fn()
    
    render(<UserCard user={mockUser} onDelete={mockOnDelete} />)
    
    const deleteButton = screen.getByRole('button', { name: /delete user/i })
    await user.click(deleteButton)
    
    expect(screen.getByText(/are you sure you want to delete/i)).toBeInTheDocument()
  })
  
  it('is accessible via keyboard navigation', async () => {
    const user = userEvent.setup()
    const mockOnEdit = jest.fn()
    
    render(<UserCard user={mockUser} onEdit={mockOnEdit} />)
    
    // Tab to the edit button and press Enter
    await user.tab()
    await user.keyboard('{Enter}')
    
    expect(mockOnEdit).toHaveBeenCalledWith(mockUser)
  })
})
```

### Custom Hook Testing
Test custom hooks in isolation with proper setup.

```tsx
// ✅ Good - Custom hook testing
import { renderHook, act } from '@testing-library/react'
import { useUsers } from './useUsers'
import { userService } from '../services/userService'

// Mock the service
jest.mock('../services/userService')
const mockUserService = userService as jest.Mocked<typeof userService>

describe('useUsers', () => {
  beforeEach(() => {
    jest.clearAllMocks()
  })
  
  it('loads users on mount', async () => {
    const mockUsers = [mockUser]
    mockUserService.fetchUsers.mockResolvedValue({ success: true, data: mockUsers })
    
    const { result } = renderHook(() => useUsers())
    
    expect(result.current.loading).toBe(true)
    expect(result.current.users).toEqual([])
    
    await waitFor(() => {
      expect(result.current.loading).toBe(false)
    })
    
    expect(result.current.users).toEqual(mockUsers)
    expect(result.current.error).toBeNull()
  })
  
  it('handles fetch errors gracefully', async () => {
    mockUserService.fetchUsers.mockResolvedValue({ success: false, error: 'Network error' })
    
    const { result } = renderHook(() => useUsers())
    
    await waitFor(() => {
      expect(result.current.loading).toBe(false)
    })
    
    expect(result.current.users).toEqual([])
    expect(result.current.error).toBe('Network error')
  })
  
  it('refetches users when refresh is called', async () => {
    const mockUsers = [mockUser]
    mockUserService.fetchUsers.mockResolvedValue({ success: true, data: mockUsers })
    
    const { result } = renderHook(() => useUsers())
    
    await waitFor(() => {
      expect(result.current.loading).toBe(false)
    })
    
    act(() => {
      result.current.refresh()
    })
    
    expect(result.current.loading).toBe(true)
    expect(mockUserService.fetchUsers).toHaveBeenCalledTimes(2)
  })
})
```

### Integration Testing
Test component interactions and data flow.

```tsx
// ✅ Good - Integration testing
import { render, screen, waitFor } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { UserManagement } from './UserManagement'
import { userService } from '../services/userService'

jest.mock('../services/userService')
const mockUserService = userService as jest.Mocked<typeof userService>

const createWrapper = () => {
  const queryClient = new QueryClient({
    defaultOptions: {
      queries: { retry: false },
      mutations: { retry: false }
    }
  })
  
  return ({ children }: { children: React.ReactNode }) => (
    <QueryClientProvider client={queryClient}>
      {children}
    </QueryClientProvider>
  )
}

describe('UserManagement Integration', () => {
  beforeEach(() => {
    jest.clearAllMocks()
  })
  
  it('allows user to create, edit, and delete users', async () => {
    const user = userEvent.setup()
    const mockUsers = [mockUser]
    
    mockUserService.fetchUsers.mockResolvedValue({ success: true, data: mockUsers })
    mockUserService.createUser.mockResolvedValue({ success: true, data: { ...mockUser, id: '2' } })
    mockUserService.updateUser.mockResolvedValue({ success: true, data: mockUser })
    mockUserService.deleteUser.mockResolvedValue({ success: true, data: undefined })
    
    render(<UserManagement />, { wrapper: createWrapper() })
    
    // Wait for users to load
    await waitFor(() => {
      expect(screen.getByText('John Doe')).toBeInTheDocument()
    })
    
    // Create new user
    await user.click(screen.getByRole('button', { name: /add user/i }))
    await user.type(screen.getByLabelText(/name/i), 'Jane Smith')
    await user.type(screen.getByLabelText(/email/i), 'jane@example.com')
    await user.click(screen.getByRole('button', { name: /save/i }))
    
    expect(mockUserService.createUser).toHaveBeenCalledWith({
      name: 'Jane Smith',
      email: 'jane@example.com'
    })
    
    // Edit existing user
    await user.click(screen.getByRole('button', { name: /edit john doe/i }))
    await user.clear(screen.getByDisplayValue('John Doe'))
    await user.type(screen.getByLabelText(/name/i), 'John Smith')
    await user.click(screen.getByRole('button', { name: /save/i }))
    
    expect(mockUserService.updateUser).toHaveBeenCalledWith('1', {
      name: 'John Smith',
      email: 'john@example.com'
    })
    
    // Delete user
    await user.click(screen.getByRole('button', { name: /delete john/i }))
    await user.click(screen.getByRole('button', { name: /confirm delete/i }))
    
    expect(mockUserService.deleteUser).toHaveBeenCalledWith('1')
  })
})
```

### Test Utilities and Setup
Create reusable test utilities for consistent testing.

```tsx
// ✅ Good - Test utilities
// test-utils.tsx
import { render, RenderOptions } from '@testing-library/react'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { BrowserRouter } from 'react-router-dom'

const AllTheProviders = ({ children }: { children: React.ReactNode }) => {
  const queryClient = new QueryClient({
    defaultOptions: {
      queries: { retry: false },
      mutations: { retry: false }
    }
  })
  
  return (
    <QueryClientProvider client={queryClient}>
      <BrowserRouter>
        {children}
      </BrowserRouter>
    </QueryClientProvider>
  )
}

const customRender = (
  ui: React.ReactElement,
  options?: Omit<RenderOptions, 'wrapper'>
) => render(ui, { wrapper: AllTheProviders, ...options })

export * from '@testing-library/react'
export { customRender as render }

// Mock factories
export const createMockUser = (overrides?: Partial<User>): User => ({
  id: '1',
  name: 'Test User',
  email: 'test@example.com',
  role: 'user',
  createdAt: new Date().toISOString(),
  ...overrides
})

// Test data builders
export const UserBuilder = {
  create: (overrides?: Partial<User>) => createMockUser(overrides),
  asAdmin: (overrides?: Partial<User>) => createMockUser({ role: 'admin', ...overrides }),
  withName: (name: string) => (overrides?: Partial<User>) => createMockUser({ name, ...overrides })
}
```
